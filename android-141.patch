diff --git a/build.gradle b/build.gradle
index d89e214..d8582cd 100644
--- a/build.gradle
+++ b/build.gradle
@@ -25,14 +25,12 @@ sourceSets {
 apply plugin: 'org.jetbrains.intellij'
 
 intellij {
-    version = project.hasProperty('ideaVersion') ? ideaVersion : 'IC-2016.3'
-
-    alternativeIdePath '/opt/idea-IC-141.178.9'
-//    alternativeIdePath '/opt/idea-IU-143.382.35'
-//    alternativeIdePath '/opt/idea-IU-145.972.3'
-//    alternativeIdePath '/opt/idea-IC-162.2228.15'
-//    alternativeIdePath '/opt/idea-IU-163.7743.44'
-//    alternativeIdePath '/opt/idea-IU-171.2272.14'
+    version = project.hasProperty('ideaVersion') ? ideaVersion : 'IC-2016.2'
+
+    plugins 'android'
+
+    alternativeIdePath '/opt/android-studio-141'
+//    alternativeIdePath '/opt/android-studio-143'
     pluginName 'samebug-idea-plugin'
     updateSinceUntilBuild false
 
@@ -50,6 +48,7 @@ repositories {
 dependencies {
     compile 'org.ocpsoft.prettytime:prettytime:4.0.1.Final'
     compile 'com.google.code.gson:gson:2.6.2'
+    compileOnly 'com.android.tools.ddms:ddmlib:25.1.0'
     testCompile 'junit:junit:4.12'
     testCompile 'org.mockito:mockito-core:1.10.19'
 }
@@ -76,10 +75,10 @@ license {
 }
 
 group = 'com.samebug.clients.idea'
-description = 'Samebug for IntelliJ IDEA'
+description = 'Samebug for Android Studio'
 version '0.14.0-SNAPSHOT' +
         (project.hasProperty('buildNumber') ? '+' + project.getProperty('buildNumber') : '') +
-        '+idea'
+        '+android-141.0'
 
 task checkstyle(type: Checkstyle) {
     configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
diff --git a/src/main/java/com/samebug/clients/common/search/api/entities/UserReference.java b/src/main/java/com/samebug/clients/common/search/api/entities/UserReference.java
index d193a95..ee010f3 100644
--- a/src/main/java/com/samebug/clients/common/search/api/entities/UserReference.java
+++ b/src/main/java/com/samebug/clients/common/search/api/entities/UserReference.java
@@ -16,8 +16,8 @@
 package com.samebug.clients.common.search.api.entities;
 
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
+import javax.annotation.Nullable;
 import java.net.URL;
 
 public final class UserReference {
diff --git a/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java b/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java
index ca0ec90..94d5d4d 100644
--- a/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java
+++ b/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java
@@ -19,14 +19,18 @@ import com.intellij.openapi.components.AbstractProjectComponent;
 import com.intellij.openapi.project.Project;
 import com.samebug.clients.idea.services.ApiService;
 import com.samebug.clients.idea.services.SessionService;
+import com.samebug.clients.idea.services.android.LogcatService;
+import com.samebug.clients.idea.services.android.LogcatServiceFactory;
 
 public class SamebugProjectComponent extends AbstractProjectComponent {
     private final SessionService sessionService;
+    private final LogcatService logcatService;
     private final ApiService apiService;
 
     public SamebugProjectComponent(Project project) {
         super(project);
         this.sessionService = new SessionService(project);
+        this.logcatService = LogcatServiceFactory.createService(project);
         this.apiService = new ApiService(project);
     }
 
@@ -36,11 +40,13 @@ public class SamebugProjectComponent extends AbstractProjectComponent {
 
     @Override
     public void projectOpened() {
+        logcatService.projectOpened();
         apiService.projectOpened();
     }
 
     @Override
     public void projectClosed() {
+        logcatService.projectClosed();
         apiService.projectClosed();
     }
 
diff --git a/src/main/java/com/samebug/clients/idea/processadapters/LogcatWriter.java b/src/main/java/com/samebug/clients/idea/processadapters/LogcatWriter.java
new file mode 100644
index 0000000..75b0af6
--- /dev/null
+++ b/src/main/java/com/samebug/clients/idea/processadapters/LogcatWriter.java
@@ -0,0 +1,45 @@
+/**
+ * Copyright 2017 Samebug, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samebug.clients.idea.processadapters;
+
+import com.android.tools.idea.logcat.AndroidConsoleWriter;
+import com.android.tools.idea.logcat.AndroidLogcatFormatter;
+import com.android.tools.idea.logcat.AndroidLogcatPreferences;
+import com.intellij.openapi.project.Project;
+import com.samebug.clients.common.search.api.LogScanner;
+import org.jetbrains.annotations.NotNull;
+
+public class LogcatWriter implements AndroidConsoleWriter {
+    private final AndroidLogcatFormatter logFormatter;
+    private final LogScanner logScanner;
+
+    public LogcatWriter(Project project, LogScanner logScanner) {
+        AndroidLogcatPreferences logcatPreferences = AndroidLogcatPreferences.getInstance(project);
+        this.logFormatter = new AndroidLogcatFormatter(logcatPreferences);
+        this.logScanner = logScanner;
+    }
+
+    @Override
+    public void clear() {
+
+    }
+
+    @Override
+    public void addMessage(@NotNull String text) {
+        String formattedMessage = logFormatter.formatMessage(text);
+        logScanner.append(formattedMessage + "\n");
+    }
+}
diff --git a/src/main/java/com/samebug/clients/idea/services/android/LogcatProcessWatcher.java b/src/main/java/com/samebug/clients/idea/services/android/LogcatProcessWatcher.java
new file mode 100644
index 0000000..8cec3e9
--- /dev/null
+++ b/src/main/java/com/samebug/clients/idea/services/android/LogcatProcessWatcher.java
@@ -0,0 +1,190 @@
+/**
+ * Copyright 2017 Samebug, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samebug.clients.idea.services.android;
+
+import com.android.ddmlib.*;
+import com.android.tools.idea.logcat.AndroidLogcatReceiver;
+import com.android.tools.idea.logcat.AndroidLogcatView;
+import com.android.tools.idea.monitor.AndroidToolWindowFactory;
+import com.intellij.execution.impl.ConsoleViewImpl;
+import com.intellij.execution.ui.ConsoleView;
+import com.intellij.notification.Notification;
+import com.intellij.notification.NotificationType;
+import com.intellij.notification.Notifications;
+import com.intellij.openapi.application.ApplicationManager;
+import com.intellij.openapi.diagnostic.Logger;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.wm.ToolWindow;
+import com.intellij.openapi.wm.ToolWindowManager;
+import com.intellij.ui.content.Content;
+import com.samebug.clients.common.search.api.LogScannerFactory;
+import com.samebug.clients.common.search.api.entities.tracking.DebugSessionInfo;
+import com.samebug.clients.idea.components.application.Tracking;
+import com.samebug.clients.idea.components.project.SamebugProjectComponent;
+import com.samebug.clients.idea.components.project.StackTraceMatcherFactory;
+import com.samebug.clients.idea.components.project.ToolWindowController;
+import com.samebug.clients.idea.console.ConsoleWatcher;
+import com.samebug.clients.idea.processadapters.LogcatWriter;
+import com.samebug.clients.idea.tracking.Events;
+import com.samebug.clients.idea.util.AndroidSdkUtil;
+import org.jetbrains.android.actions.AndroidEnableAdbServiceAction;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+class LogcatProcessWatcher implements LogcatService, AndroidDebugBridge.IDeviceChangeListener {
+    final private Project myProject;
+
+    // AbstractProjectComponent overrides
+    public LogcatProcessWatcher(Project project) {
+        myProject = project;
+    }
+
+    @Override
+    public void projectOpened() {
+        File adb = AndroidSdkUtil.getAdb(myProject);
+        if (adb != null) {
+            AndroidDebugBridge.initIfNeeded(AndroidEnableAdbServiceAction.isAdbServiceEnabled());
+            AndroidDebugBridge bridge = AndroidDebugBridge.createBridge(adb.getPath(), false);
+            AndroidDebugBridge.addDeviceChangeListener(this);
+            if (bridge.isConnected()) {
+                for (IDevice device : bridge.getDevices()) {
+                    initReceiver(device);
+                }
+            }
+        }
+    }
+
+    @Override
+    public void projectClosed() {
+        AndroidDebugBridge.removeDeviceChangeListener(this);
+        for (Integer deviceHash : listeners.keySet()) {
+            removeReceiver(deviceHash);
+        }
+        listeners.clear();
+    }
+
+    // IDeviceChangeListener overrides
+    @Override
+    public void deviceConnected(IDevice device) {
+        initReceiver(device);
+    }
+
+
+    @Override
+    public void deviceDisconnected(IDevice device) {
+        removeReceiver(device);
+    }
+
+    @Override
+    public void deviceChanged(IDevice device, int changeMask) {
+        initReceiver(device);
+    }
+
+    // implementation
+    private synchronized void initReceiver(@NotNull IDevice device) {
+        ApplicationManager.getApplication().invokeLater(new Runnable() {
+            @Override
+            public void run() {
+                myProject.getComponent(ToolWindowController.class).changeToolwindowIcon(false);
+            }
+        });
+        if (device.isOnline()) {
+            Integer deviceHashCode = System.identityHashCode(device);
+            if (listeners.get(deviceHashCode) == null) {
+                createListener(device, deviceHashCode);
+            }
+        }
+    }
+
+    private AndroidLogcatReceiver createListener(@NotNull final IDevice device, Integer deviceHashCode) {
+        final DebugSessionInfo sessionInfo = new DebugSessionInfo("logcat");
+
+        final LogScannerFactory scannerFactory = new StackTraceMatcherFactory(myProject, sessionInfo);
+        final AndroidLogcatReceiver receiver = new AndroidLogcatReceiver(device, new LogcatWriter(myProject, scannerFactory.createScanner()));
+        listeners.put(deviceHashCode, receiver);
+        debugSessionInfos.put(deviceHashCode, sessionInfo);
+
+        ToolWindow t = ToolWindowManager.getInstance(myProject).getToolWindow(AndroidToolWindowFactory.TOOL_WINDOW_ID);
+        for (Content content : t.getContentManager().getContents()) {
+            final AndroidLogcatView view = content.getUserData(AndroidLogcatView.ANDROID_LOGCAT_VIEW_KEY);
+
+            if (view != null) {
+                ConsoleView c = view.getLogConsole().getConsole();
+                if (c instanceof ConsoleViewImpl) {
+                    // do we have to keep this reference?
+                    new ConsoleWatcher((ConsoleViewImpl) c, sessionInfo);
+                }
+            }
+        }
+
+        ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    device.executeShellCommand("logcat -v long", receiver, 0L, TimeUnit.NANOSECONDS);
+                } catch (TimeoutException e) {
+                    LOGGER.warn("Unable to create receiver for device " + device.getName(), e);
+                    Notifications.Bus.notify(new Notification("samebug", "Adb connection failure",
+                            "Unable to create receiver for device " + device.getName(), NotificationType.WARNING));
+                } catch (AdbCommandRejectedException e) {
+                    LOGGER.warn("Unable to create receiver for device " + device.getName(), e);
+                    Notifications.Bus.notify(new Notification("samebug", "Adb connection failure",
+                            "Unable to create receiver for device " + device.getName(), NotificationType.WARNING));
+                } catch (ShellCommandUnresponsiveException e) {
+                    LOGGER.warn("Unable to create receiver for device " + device.getName(), e);
+                    Notifications.Bus.notify(new Notification("samebug", "Adb connection failure",
+                            "Unable to create receiver for device " + device.getName(), NotificationType.WARNING));
+                } catch (IOException e) {
+                    LOGGER.warn("Unable to create receiver for device " + device.getName(), e);
+                    Notifications.Bus.notify(new Notification("samebug", "Adb connection failure",
+                            "Unable to create receiver for device " + device.getName(), NotificationType.WARNING));
+                }
+
+            }
+        });
+
+        Tracking.projectTracking(myProject).trace(Events.debugStart(myProject, sessionInfo));
+
+        return receiver;
+    }
+
+    private synchronized void removeReceiver(@NotNull IDevice device) {
+        removeReceiver(System.identityHashCode(device));
+    }
+
+    private void removeReceiver(Integer deviceHashCode) {
+        AndroidLogcatReceiver receiver = listeners.get(deviceHashCode);
+        if (receiver != null) {
+            receiver.processNewLine("\n");
+            receiver.done();
+            Tracking.projectTracking(myProject).trace(Events.debugStop(myProject, debugSessionInfos.get(deviceHashCode)));
+
+            DebugSessionInfo sessionInfo = debugSessionInfos.get(deviceHashCode);
+            debugSessionInfos.remove(deviceHashCode);
+            listeners.remove(deviceHashCode);
+            myProject.getComponent(SamebugProjectComponent.class).getSessionService().removeSession(sessionInfo);
+        }
+    }
+
+    private final Map<Integer, AndroidLogcatReceiver> listeners = new HashMap<Integer, AndroidLogcatReceiver>();
+    private final Map<Integer, DebugSessionInfo> debugSessionInfos = new HashMap<Integer, DebugSessionInfo>();
+    private final static Logger LOGGER = Logger.getInstance(LogcatProcessWatcher.class);
+}
diff --git a/src/main/java/com/samebug/clients/idea/services/android/LogcatService.java b/src/main/java/com/samebug/clients/idea/services/android/LogcatService.java
new file mode 100644
index 0000000..ec1f941
--- /dev/null
+++ b/src/main/java/com/samebug/clients/idea/services/android/LogcatService.java
@@ -0,0 +1,22 @@
+/**
+ * Copyright 2017 Samebug, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samebug.clients.idea.services.android;
+
+public interface LogcatService {
+    void projectOpened();
+
+    void projectClosed();
+}
diff --git a/src/main/java/com/samebug/clients/idea/services/android/LogcatServiceFactory.java b/src/main/java/com/samebug/clients/idea/services/android/LogcatServiceFactory.java
new file mode 100644
index 0000000..9756a9c
--- /dev/null
+++ b/src/main/java/com/samebug/clients/idea/services/android/LogcatServiceFactory.java
@@ -0,0 +1,49 @@
+/**
+ * Copyright 2017 Samebug, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samebug.clients.idea.services.android;
+
+import com.android.ddmlib.AndroidDebugBridge;
+import com.android.tools.idea.logcat.AndroidLogcatReceiver;
+import com.intellij.openapi.project.Project;
+import org.jetbrains.android.facet.AndroidFacet;
+
+/**
+ * This proxy class separates the behaviour of Logcat watcher.
+ * <p>
+ * If Android SDK is not present, it does nothing, so it will not crash in environments without Android SDK.
+ */
+public class LogcatServiceFactory {
+    public static LogcatService createService(Project project) {
+        boolean isAndroidSdkPresent;
+        try {
+            Class<?> resolveAndroidFacet = AndroidFacet.class;
+            Class<?> resolveAndroidDebugBridge = AndroidDebugBridge.class;
+            Class<?> resolveIDeviceChangeListener = AndroidDebugBridge.IDeviceChangeListener.class;
+            Class<?> resolveAndroidLogcatReceiver = AndroidLogcatReceiver.class;
+            isAndroidSdkPresent = true;
+        } catch (NoClassDefFoundError e) {
+            isAndroidSdkPresent = false;
+        } catch (IllegalAccessError e) {
+            isAndroidSdkPresent = false;
+        }
+        if (isAndroidSdkPresent) {
+            return new LogcatProcessWatcher(project);
+        } else {
+            return new NopService();
+        }
+    }
+}
+
diff --git a/src/main/java/com/samebug/clients/idea/services/android/NopService.java b/src/main/java/com/samebug/clients/idea/services/android/NopService.java
new file mode 100644
index 0000000..7deb95e
--- /dev/null
+++ b/src/main/java/com/samebug/clients/idea/services/android/NopService.java
@@ -0,0 +1,28 @@
+/**
+ * Copyright 2017 Samebug, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samebug.clients.idea.services.android;
+
+class NopService implements LogcatService {
+    @Override
+    public void projectOpened() {
+
+    }
+
+    @Override
+    public void projectClosed() {
+
+    }
+}
diff --git a/src/main/java/com/samebug/clients/idea/util/AndroidSdkUtil.java b/src/main/java/com/samebug/clients/idea/util/AndroidSdkUtil.java
new file mode 100644
index 0000000..27197e6
--- /dev/null
+++ b/src/main/java/com/samebug/clients/idea/util/AndroidSdkUtil.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright 2017 Samebug, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samebug.clients.idea.util;
+
+import com.intellij.facet.ProjectFacetManager;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.projectRoots.Sdk;
+import com.intellij.openapi.roots.ProjectRootManager;
+import org.jetbrains.android.facet.AndroidFacet;
+import org.jetbrains.android.sdk.AndroidPlatform;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.util.List;
+
+import static com.android.SdkConstants.FN_ADB;
+import static org.jetbrains.android.util.AndroidCommonUtils.platformToolPath;
+
+final public class AndroidSdkUtil {
+    @Nullable
+    public static File getAdb(@NotNull Project project) {
+        AndroidPlatform platform = getProjectPlatform(project);
+        if (platform == null) {
+            platform = getFirstAndroidModulePlatform(project);
+        }
+        File adb = platform != null ? new File(platform.getSdkData().getLocation(), platformToolPath(FN_ADB)) : null;
+        return adb != null && adb.exists() ? adb : null;
+    }
+
+    @Nullable
+    private static AndroidPlatform getProjectPlatform(Project project) {
+        Sdk projectSdk = ProjectRootManager.getInstance(project).getProjectSdk();
+        if (projectSdk != null) {
+            return AndroidPlatform.getInstance(projectSdk);
+        }
+        return null;
+    }
+
+    @Nullable
+    private static AndroidPlatform getFirstAndroidModulePlatform(Project project) {
+        List<AndroidFacet> facets = ProjectFacetManager.getInstance(project).getFacets(AndroidFacet.ID);
+        for (AndroidFacet facet : facets) {
+            if (facet.getConfiguration().getAndroidPlatform() != null)
+                return facet.getConfiguration().getAndroidPlatform();
+        }
+        return null;
+    }
+}
diff --git a/src/main/resources/META-INF/plugin.xml b/src/main/resources/META-INF/plugin.xml
index 9e2590a..757cac6 100644
--- a/src/main/resources/META-INF/plugin.xml
+++ b/src/main/resources/META-INF/plugin.xml
@@ -1,5 +1,5 @@
 <idea-plugin version="2">
-    <id>Samebug</id>
+    <id>Samebug for Android Studio</id>
     <name>Samebug</name>
     <vendor email="hello@samebug.io" url="http://samebug.io">Samebug</vendor>
 
@@ -27,7 +27,10 @@
     </change-notes>
 
     <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
-    <idea-version since-build="141.0"/>
+    <idea-version since-build="141.0" until-build="145.0"/>
+
+    <!-- Without this explicit dependency, the plugin won't see the ddmlib and org.jetbrains.android classes -->
+    <depends>org.jetbrains.android</depends>
 
     <extensions defaultExtensionNs="com.intellij">
         <toolWindow id="Samebug" icon="/com/samebug/toolwindow/samebug.png" anchor="right"
