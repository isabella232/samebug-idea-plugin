diff --git a/AS-2.2.0.patch b/AS-2.2.0.patch
index f2a23fbe..e69de29b 100644
--- a/AS-2.2.0.patch
+++ b/AS-2.2.0.patch
@@ -1,337 +0,0 @@
-diff --git a/build.gradle b/build.gradle
-index f52dcd0d..5a4c0bc0 100644
---- a/build.gradle
-+++ b/build.gradle
-@@ -7,7 +7,7 @@ group = 'com.samebug.clients.idea'
- description = 'Samebug for IntelliJ IDEA'
- version '0.14.0-SNAPSHOT' +
-         (project.hasProperty('buildNumber') ? '+' + project.getProperty('buildNumber') : '') +
--        '+idea'
-+        '+AS-2.2.0'
- 
- apply plugin: 'java'
- apply plugin: 'org.jetbrains.intellij'
-@@ -22,14 +22,9 @@ allprojects {
- }
- 
- intellij {
--    version = project.hasProperty('ideaVersion') ? ideaVersion : 'IC-2016.3'
-+    version = project.hasProperty('ideaVersion') ? ideaVersion : 'IC-2016.2'
- 
--//    alternativeIdePath '/opt/idea-IC-141.178.9'
--//    alternativeIdePath '/opt/idea-IU-143.382.35'
--//    alternativeIdePath '/opt/idea-IU-145.972.3'
--//    alternativeIdePath '/opt/idea-IC-162.2228.15'
--//    alternativeIdePath '/opt/idea-IU-163.7743.44'
--//    alternativeIdePath '/opt/idea-IU-171.2272.14'
-+    alternativeIdePath '/opt/android-studio-145'
-     pluginName 'samebug-idea-plugin'
-     updateSinceUntilBuild false
- 
-@@ -60,6 +55,9 @@ repositories {
- dependencies {
-     compile 'org.ocpsoft.prettytime:prettytime:4.0.1.Final'
-     compile 'com.google.code.gson:gson:2.6.2'
-+    // Android Support plugin is specified here as an explicit dependency to guarantee the right version
-+    compileOnly files('lib/android.jar')
-+    compileOnly 'com.android.tools.ddms:ddmlib:25.2.0'
-     testCompile 'junit:junit:4.12'
-     testCompile 'org.mockito:mockito-core:1.10.19'
-     testCompile 'joda-time:joda-time:2.9.7'
-diff --git a/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java b/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java
-index 33c7ea35..45dc93f1 100644
---- a/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java
-+++ b/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java
-@@ -18,6 +18,7 @@ package com.samebug.clients.idea.components.project;
- import com.intellij.openapi.components.AbstractProjectComponent;
- import com.intellij.openapi.project.Project;
- import com.intellij.openapi.util.Disposer;
-+import com.samebug.clients.idea.services.android.LogcatProcessWatcher;
- import com.samebug.clients.idea.tracking.Events;
- import com.samebug.clients.idea.ui.controller.toolwindow.ToolWindowController;
- import com.samebug.clients.swing.ui.modules.TrackingService;
-@@ -25,10 +26,12 @@ import com.samebug.clients.swing.ui.modules.TrackingService;
- public class SamebugProjectComponent extends AbstractProjectComponent {
-     private ToolWindowController toolWindowController;
-     private RunDebugWatcher runDebugWatcher;
-+    private final LogcatProcessWatcher logcatService;
-     private DeprecationNotifier deprecationNotifier;
- 
-     public SamebugProjectComponent(Project project) {
-         super(project);
-+        this.logcatService = new LogcatProcessWatcher(project);
-     }
- 
-     public ToolWindowController getToolWindowController() {
-@@ -42,6 +45,8 @@ public class SamebugProjectComponent extends AbstractProjectComponent {
-         this.runDebugWatcher = new RunDebugWatcher(myProject);
-         this.deprecationNotifier = new DeprecationNotifier(myProject);
- 
-+        logcatService.projectOpened();
-+
-         TrackingService.trace(Events.projectOpen(myProject));
-     }
- 
-@@ -50,7 +55,8 @@ public class SamebugProjectComponent extends AbstractProjectComponent {
-         Disposer.dispose(toolWindowController);
-         Disposer.dispose(runDebugWatcher);
- 
--        TrackingService.trace(Events.projectClose(myProject));
-+        logcatService.projectClosed();
- 
-+        TrackingService.trace(Events.projectClose(myProject));
-     }
- }
-diff --git a/src/main/java/com/samebug/clients/idea/processadapters/LogcatWriter.java b/src/main/java/com/samebug/clients/idea/processadapters/LogcatWriter.java
-new file mode 100644
-index 00000000..3340bb9c
---- /dev/null
-+++ b/src/main/java/com/samebug/clients/idea/processadapters/LogcatWriter.java
-@@ -0,0 +1,68 @@
-+/*
-+ * Copyright 2017 Samebug, Inc.
-+ *
-+ * Licensed under the Apache License, Version 2.0 (the "License");
-+ * you may not use this file except in compliance with the License.
-+ * You may obtain a copy of the License at
-+ * <p>
-+ *    http://www.apache.org/licenses/LICENSE-2.0
-+ * <p>
-+ * Unless required by applicable law or agreed to in writing, software
-+ * distributed under the License is distributed on an "AS IS" BASIS,
-+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-+ * See the License for the specific language governing permissions and
-+ * limitations under the License.
-+ */
-+package com.samebug.clients.idea.processadapters;
-+
-+import com.android.ddmlib.logcat.LogCatHeader;
-+import com.android.ddmlib.logcat.LogCatMessage;
-+import com.android.tools.idea.logcat.AndroidLogcatFormatter;
-+import com.android.tools.idea.logcat.AndroidLogcatPreferences;
-+import com.android.tools.idea.logcat.AndroidLogcatService;
-+import com.samebug.clients.common.search.LogScanner;
-+import org.jetbrains.annotations.NotNull;
-+
-+public class LogcatWriter extends FormattedLogLineReceiver {
-+    private final LogScanner logScanner;
-+    private final AndroidLogcatFormatter logFormatter;
-+
-+    public LogcatWriter(AndroidLogcatPreferences logcatPreferences, LogScanner logScanner) {
-+        this.logScanner = logScanner;
-+        this.logFormatter = new AndroidLogcatFormatter(logcatPreferences);
-+    }
-+
-+    @Override
-+    protected void receiveFormattedLogLine(@NotNull String message) {
-+        String formattedMessage = logFormatter.formatMessage(message);
-+        logScanner.append(formattedMessage + "\n");
-+    }
-+}
-+
-+/**
-+ * We have to imitate the behavior of the logcat console, but that class was not public.
-+ * <p>
-+ * This is definitely not the best solution, but works for now.
-+ */
-+abstract class FormattedLogLineReceiver implements AndroidLogcatService.LogLineListener {
-+    private LogCatHeader myActiveHeader;
-+
-+    FormattedLogLineReceiver() {
-+    }
-+
-+    @Override
-+    public final void receiveLogLine(@NotNull LogCatMessage line) {
-+        String message;
-+        if (!line.getHeader().equals(this.myActiveHeader)) {
-+            this.myActiveHeader = line.getHeader();
-+            message = AndroidLogcatFormatter.formatMessageFull(this.myActiveHeader, line.getMessage());
-+            this.receiveFormattedLogLine(message);
-+        } else {
-+            message = AndroidLogcatFormatter.formatContinuation(line.getMessage());
-+            this.receiveFormattedLogLine(message);
-+        }
-+
-+    }
-+
-+    protected abstract void receiveFormattedLogLine(@NotNull String var1);
-+}
-diff --git a/src/main/java/com/samebug/clients/idea/services/android/LogcatProcessWatcher.java b/src/main/java/com/samebug/clients/idea/services/android/LogcatProcessWatcher.java
-new file mode 100644
-index 00000000..44fef6e7
---- /dev/null
-+++ b/src/main/java/com/samebug/clients/idea/services/android/LogcatProcessWatcher.java
-@@ -0,0 +1,150 @@
-+/*
-+ * Copyright 2017 Samebug, Inc.
-+ *
-+ * Licensed under the Apache License, Version 2.0 (the "License");
-+ * you may not use this file except in compliance with the License.
-+ * You may obtain a copy of the License at
-+ * <p>
-+ *    http://www.apache.org/licenses/LICENSE-2.0
-+ * <p>
-+ * Unless required by applicable law or agreed to in writing, software
-+ * distributed under the License is distributed on an "AS IS" BASIS,
-+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-+ * See the License for the specific language governing permissions and
-+ * limitations under the License.
-+ */
-+package com.samebug.clients.idea.services.android;
-+
-+import com.android.ddmlib.AndroidDebugBridge;
-+import com.android.ddmlib.IDevice;
-+import com.android.tools.idea.logcat.AndroidLogcatPreferences;
-+import com.android.tools.idea.logcat.AndroidLogcatService;
-+import com.android.tools.idea.logcat.AndroidLogcatView;
-+import com.android.tools.idea.monitor.AndroidToolWindowFactory;
-+import com.intellij.execution.impl.ConsoleViewImpl;
-+import com.intellij.execution.ui.ConsoleView;
-+import com.intellij.openapi.application.ApplicationManager;
-+import com.intellij.openapi.diagnostic.Logger;
-+import com.intellij.openapi.project.Project;
-+import com.intellij.openapi.wm.ToolWindow;
-+import com.intellij.openapi.wm.ToolWindowManager;
-+import com.intellij.ui.content.Content;
-+import com.samebug.clients.common.entities.search.DebugSessionInfo;
-+import com.samebug.clients.common.search.LogScannerFactory;
-+import com.samebug.clients.idea.components.application.IdeaSamebugPlugin;
-+import com.samebug.clients.idea.processadapters.LogcatWriter;
-+import com.samebug.clients.idea.search.StackTraceMatcherFactory;
-+import com.samebug.clients.idea.search.console.ConsoleWatcher;
-+import com.samebug.clients.idea.tracking.Events;
-+import com.samebug.clients.swing.ui.modules.TrackingService;
-+import org.jetbrains.android.sdk.AndroidSdkUtils;
-+import org.jetbrains.annotations.NotNull;
-+
-+import java.util.HashMap;
-+import java.util.Map;
-+
-+public class LogcatProcessWatcher implements AndroidDebugBridge.IDeviceChangeListener {
-+    final private Project myProject;
-+
-+    public LogcatProcessWatcher(Project project) {
-+        myProject = project;
-+    }
-+
-+    public void projectOpened() {
-+        AndroidDebugBridge.addDeviceChangeListener(this);
-+
-+        ApplicationManager.getApplication().invokeLater(new Runnable() {
-+            @Override
-+            public void run() {
-+                AndroidDebugBridge bridge = AndroidSdkUtils.getDebugBridge(myProject);
-+                if (bridge != null && bridge.isConnected()) {
-+                    for (IDevice device : bridge.getDevices()) {
-+                        initReceiver(device);
-+                    }
-+                }
-+            }
-+        });
-+    }
-+
-+    public void projectClosed() {
-+        AndroidDebugBridge.removeDeviceChangeListener(this);
-+        for (Integer deviceHash : listeners.keySet()) {
-+            removeReceiver(deviceHash);
-+        }
-+        listeners.clear();
-+    }
-+
-+    // IDeviceChangeListener overrides
-+    @Override
-+    public void deviceConnected(IDevice device) {
-+        initReceiver(device);
-+    }
-+
-+
-+    @Override
-+    public void deviceDisconnected(IDevice device) {
-+        removeReceiver(device);
-+    }
-+
-+    @Override
-+    public void deviceChanged(IDevice device, int changeMask) {
-+        initReceiver(device);
-+    }
-+
-+    // implementation
-+    private synchronized void initReceiver(@NotNull IDevice device) {
-+        if (device.isOnline()) {
-+            Integer deviceHashCode = System.identityHashCode(device);
-+            if (listeners.get(deviceHashCode) == null) {
-+                createListener(device, deviceHashCode);
-+            }
-+        }
-+    }
-+
-+    private void createListener(@NotNull final IDevice device, Integer deviceHashCode) {
-+        final DebugSessionInfo sessionInfo = new DebugSessionInfo("logcat");
-+
-+        final LogScannerFactory scannerFactory = new StackTraceMatcherFactory(myProject, sessionInfo);
-+        AndroidLogcatPreferences logcatPreferences = AndroidLogcatPreferences.getInstance(myProject);
-+        final AndroidLogcatService.LogLineListener receiver = new LogcatWriter(logcatPreferences, scannerFactory.createScanner());
-+        listeners.put(deviceHashCode, receiver);
-+        debugSessionInfos.put(deviceHashCode, sessionInfo);
-+
-+        ToolWindow t = ToolWindowManager.getInstance(myProject).getToolWindow(AndroidToolWindowFactory.TOOL_WINDOW_ID);
-+        for (Content content : t.getContentManager().getContents()) {
-+            final AndroidLogcatView view = content.getUserData(AndroidLogcatView.ANDROID_LOGCAT_VIEW_KEY);
-+
-+            if (view != null) {
-+                ConsoleView c = view.getLogConsole().getConsole();
-+                if (c instanceof ConsoleViewImpl) {
-+                    // do we have to keep this reference?
-+                    new ConsoleWatcher(myProject, (ConsoleViewImpl) c, sessionInfo);
-+                }
-+            }
-+        }
-+
-+        AndroidLogcatService.getInstance().addListener(device, receiver, true);
-+
-+        TrackingService.trace(Events.debugStart(myProject, sessionInfo));
-+    }
-+
-+    private synchronized void removeReceiver(@NotNull IDevice device) {
-+        removeReceiver(System.identityHashCode(device));
-+    }
-+
-+    private void removeReceiver(Integer deviceHashCode) {
-+        AndroidLogcatService.LogLineListener receiver = listeners.get(deviceHashCode);
-+        if (receiver != null) {
-+            DebugSessionInfo sessionInfo = debugSessionInfos.get(deviceHashCode);
-+            debugSessionInfos.remove(deviceHashCode);
-+            listeners.remove(deviceHashCode);
-+            IdeaSamebugPlugin.getInstance().searchRequestStore.removeSession(sessionInfo);
-+
-+            TrackingService.trace(Events.debugStop(myProject, debugSessionInfos.get(deviceHashCode)));
-+        }
-+    }
-+
-+    private final Map<Integer, AndroidLogcatService.LogLineListener> listeners = new HashMap<Integer, AndroidLogcatService.LogLineListener>();
-+    private final Map<Integer, DebugSessionInfo> debugSessionInfos = new HashMap<Integer, DebugSessionInfo>();
-+    private final static Logger LOGGER = Logger.getInstance(LogcatProcessWatcher.class);
-+}
-diff --git a/src/main/resources/META-INF/plugin.xml b/src/main/resources/META-INF/plugin.xml
-index 5e20b8c6..10aaee68 100644
---- a/src/main/resources/META-INF/plugin.xml
-+++ b/src/main/resources/META-INF/plugin.xml
-@@ -1,5 +1,5 @@
- <idea-plugin version="2">
--    <id>Samebug</id>
-+    <id>Samebug for Android Studio</id>
-     <name>Samebug</name>
-     <vendor email="hello@samebug.io" url="http://samebug.io">Samebug</vendor>
- 
-@@ -25,8 +25,9 @@
-     ]]>
-     </change-notes>
- 
--    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
--    <idea-version since-build="141.0"/>
-+    <idea-version since-build="145.0" until-build="162.0"/>
-+    <!-- Without this explicit dependency, the plugin won't see the ddmlib and org.jetbrains.android classes -->
-+    <depends>org.jetbrains.android</depends>
- 
-     <extensions defaultExtensionNs="com.intellij">
-         <toolWindow id="Samebug" icon="/com/samebug/toolwindow/samebug.png" anchor="right"
diff --git a/build.gradle b/build.gradle
index 8b3da788..769183ee 100644
--- a/build.gradle
+++ b/build.gradle
@@ -7,7 +7,7 @@ group = 'com.samebug.clients.idea'
 description = 'Samebug for IntelliJ IDEA'
 version '0.15.0' +
         (project.hasProperty('buildNumber') ? '+' + project.getProperty('buildNumber') : '') +
-        '+idea'
+        '+AS-2.2.0'
 
 apply plugin: 'java'
 apply plugin: 'org.jetbrains.intellij'
@@ -22,14 +22,9 @@ allprojects {
 }
 
 intellij {
-    version = project.hasProperty('ideaVersion') ? ideaVersion : 'IC-2016.3'
-
-//    alternativeIdePath '/opt/idea-IC-141.178.9'
-//    alternativeIdePath '/opt/idea-IU-143.382.35'
-//    alternativeIdePath '/opt/idea-IU-145.972.3'
-//    alternativeIdePath '/opt/idea-IC-162.2228.15'
-//    alternativeIdePath '/opt/idea-IU-163.7743.44'
-//    alternativeIdePath '/opt/idea-IU-171.2272.14'
+    version = project.hasProperty('ideaVersion') ? ideaVersion : 'IC-2016.2'
+
+    alternativeIdePath '/opt/android-studio-145'
     pluginName 'samebug-idea-plugin'
     updateSinceUntilBuild false
 
@@ -71,6 +66,9 @@ repositories {
 dependencies {
     compile 'org.ocpsoft.prettytime:prettytime:4.0.1.Final'
     compile 'com.google.code.gson:gson:2.6.2'
+    // Android Support plugin is specified here as an explicit dependency to guarantee the right version
+    compileOnly files('lib/android.jar')
+    compileOnly 'com.android.tools.ddms:ddmlib:25.2.0'
     testCompile 'junit:junit:4.12'
     testCompile 'org.hamcrest:hamcrest-all:1.3'
     testCompile 'org.mockito:mockito-core:1.10.19'
diff --git a/src/main/java/com/samebug/clients/idea/components/application/IdeaSamebugPlugin.java b/src/main/java/com/samebug/clients/idea/components/application/IdeaSamebugPlugin.java
index 5398074e..b777ddd9 100644
--- a/src/main/java/com/samebug/clients/idea/components/application/IdeaSamebugPlugin.java
+++ b/src/main/java/com/samebug/clients/idea/components/application/IdeaSamebugPlugin.java
@@ -64,7 +64,7 @@ import java.util.concurrent.atomic.AtomicReference;
 )
 public final class IdeaSamebugPlugin implements ApplicationComponent, PersistentStateComponent<ApplicationSettings>, Disposable {
     private static final Logger LOGGER = Logger.getInstance(IdeaSamebugPlugin.class);
-    public static final String ID = "Samebug";
+    public static final String ID = "Samebug for Android Studio";
     private AtomicReference<ApplicationSettings> state = new AtomicReference<ApplicationSettings>(new ApplicationSettings());
 
     public String applicationUserAgent;
diff --git a/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java b/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java
index 90a96a6d..82535453 100644
--- a/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java
+++ b/src/main/java/com/samebug/clients/idea/components/project/SamebugProjectComponent.java
@@ -19,16 +19,19 @@ import com.intellij.openapi.components.AbstractProjectComponent;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.util.Disposer;
 import com.samebug.clients.common.ui.modules.TrackingService;
+import com.samebug.clients.idea.services.android.LogcatProcessWatcher;
 import com.samebug.clients.idea.tracking.IdeaRawEvent;
 import com.samebug.clients.idea.ui.controller.toolwindow.ToolWindowController;
 
 public class SamebugProjectComponent extends AbstractProjectComponent {
     private ToolWindowController toolWindowController;
     private RunDebugWatcher runDebugWatcher;
+    private final LogcatProcessWatcher logcatService;
     private DeprecationNotifier deprecationNotifier;
 
     public SamebugProjectComponent(Project project) {
         super(project);
+        this.logcatService = new LogcatProcessWatcher(project);
     }
 
     public ToolWindowController getToolWindowController() {
@@ -43,6 +46,7 @@ public class SamebugProjectComponent extends AbstractProjectComponent {
         this.deprecationNotifier = new DeprecationNotifier(myProject);
 
         TrackingService.trace(IdeaRawEvent.projectOpen(myProject));
+        logcatService.projectOpened();
     }
 
     @Override
@@ -51,6 +55,6 @@ public class SamebugProjectComponent extends AbstractProjectComponent {
         Disposer.dispose(runDebugWatcher);
 
         TrackingService.trace(IdeaRawEvent.projectClose(myProject));
-
+        logcatService.projectClosed();
     }
 }
diff --git a/src/main/java/com/samebug/clients/idea/processadapters/LogcatWriter.java b/src/main/java/com/samebug/clients/idea/processadapters/LogcatWriter.java
new file mode 100644
index 00000000..3340bb9c
--- /dev/null
+++ b/src/main/java/com/samebug/clients/idea/processadapters/LogcatWriter.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright 2017 Samebug, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p>
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samebug.clients.idea.processadapters;
+
+import com.android.ddmlib.logcat.LogCatHeader;
+import com.android.ddmlib.logcat.LogCatMessage;
+import com.android.tools.idea.logcat.AndroidLogcatFormatter;
+import com.android.tools.idea.logcat.AndroidLogcatPreferences;
+import com.android.tools.idea.logcat.AndroidLogcatService;
+import com.samebug.clients.common.search.LogScanner;
+import org.jetbrains.annotations.NotNull;
+
+public class LogcatWriter extends FormattedLogLineReceiver {
+    private final LogScanner logScanner;
+    private final AndroidLogcatFormatter logFormatter;
+
+    public LogcatWriter(AndroidLogcatPreferences logcatPreferences, LogScanner logScanner) {
+        this.logScanner = logScanner;
+        this.logFormatter = new AndroidLogcatFormatter(logcatPreferences);
+    }
+
+    @Override
+    protected void receiveFormattedLogLine(@NotNull String message) {
+        String formattedMessage = logFormatter.formatMessage(message);
+        logScanner.append(formattedMessage + "\n");
+    }
+}
+
+/**
+ * We have to imitate the behavior of the logcat console, but that class was not public.
+ * <p>
+ * This is definitely not the best solution, but works for now.
+ */
+abstract class FormattedLogLineReceiver implements AndroidLogcatService.LogLineListener {
+    private LogCatHeader myActiveHeader;
+
+    FormattedLogLineReceiver() {
+    }
+
+    @Override
+    public final void receiveLogLine(@NotNull LogCatMessage line) {
+        String message;
+        if (!line.getHeader().equals(this.myActiveHeader)) {
+            this.myActiveHeader = line.getHeader();
+            message = AndroidLogcatFormatter.formatMessageFull(this.myActiveHeader, line.getMessage());
+            this.receiveFormattedLogLine(message);
+        } else {
+            message = AndroidLogcatFormatter.formatContinuation(line.getMessage());
+            this.receiveFormattedLogLine(message);
+        }
+
+    }
+
+    protected abstract void receiveFormattedLogLine(@NotNull String var1);
+}
diff --git a/src/main/java/com/samebug/clients/idea/services/android/LogcatProcessWatcher.java b/src/main/java/com/samebug/clients/idea/services/android/LogcatProcessWatcher.java
new file mode 100644
index 00000000..65215010
--- /dev/null
+++ b/src/main/java/com/samebug/clients/idea/services/android/LogcatProcessWatcher.java
@@ -0,0 +1,150 @@
+/*
+ * Copyright 2017 Samebug, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p>
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.samebug.clients.idea.services.android;
+
+import com.android.ddmlib.AndroidDebugBridge;
+import com.android.ddmlib.IDevice;
+import com.android.tools.idea.logcat.AndroidLogcatPreferences;
+import com.android.tools.idea.logcat.AndroidLogcatService;
+import com.android.tools.idea.logcat.AndroidLogcatView;
+import com.android.tools.idea.monitor.AndroidToolWindowFactory;
+import com.intellij.execution.impl.ConsoleViewImpl;
+import com.intellij.execution.ui.ConsoleView;
+import com.intellij.openapi.application.ApplicationManager;
+import com.intellij.openapi.diagnostic.Logger;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.wm.ToolWindow;
+import com.intellij.openapi.wm.ToolWindowManager;
+import com.intellij.ui.content.Content;
+import com.samebug.clients.common.entities.search.DebugSessionInfo;
+import com.samebug.clients.common.search.LogScannerFactory;
+import com.samebug.clients.common.ui.modules.TrackingService;
+import com.samebug.clients.idea.components.application.IdeaSamebugPlugin;
+import com.samebug.clients.idea.processadapters.LogcatWriter;
+import com.samebug.clients.idea.search.StackTraceMatcherFactory;
+import com.samebug.clients.idea.search.console.ConsoleWatcher;
+import com.samebug.clients.idea.tracking.IdeaRawEvent;
+import org.jetbrains.android.sdk.AndroidSdkUtils;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class LogcatProcessWatcher implements AndroidDebugBridge.IDeviceChangeListener {
+    private final Project myProject;
+
+    public LogcatProcessWatcher(Project project) {
+        myProject = project;
+    }
+
+    public void projectOpened() {
+        AndroidDebugBridge.addDeviceChangeListener(this);
+
+        ApplicationManager.getApplication().invokeLater(new Runnable() {
+            @Override
+            public void run() {
+                AndroidDebugBridge bridge = AndroidSdkUtils.getDebugBridge(myProject);
+                if (bridge != null && bridge.isConnected()) {
+                    for (IDevice device : bridge.getDevices()) {
+                        initReceiver(device);
+                    }
+                }
+            }
+        });
+    }
+
+    public void projectClosed() {
+        AndroidDebugBridge.removeDeviceChangeListener(this);
+        for (Integer deviceHash : listeners.keySet()) {
+            removeReceiver(deviceHash);
+        }
+        listeners.clear();
+    }
+
+    // IDeviceChangeListener overrides
+    @Override
+    public void deviceConnected(IDevice device) {
+        initReceiver(device);
+    }
+
+
+    @Override
+    public void deviceDisconnected(IDevice device) {
+        removeReceiver(device);
+    }
+
+    @Override
+    public void deviceChanged(IDevice device, int changeMask) {
+        initReceiver(device);
+    }
+
+    // implementation
+    private synchronized void initReceiver(@NotNull IDevice device) {
+        if (device.isOnline()) {
+            Integer deviceHashCode = System.identityHashCode(device);
+            if (listeners.get(deviceHashCode) == null) {
+                createListener(device, deviceHashCode);
+            }
+        }
+    }
+
+    private void createListener(@NotNull final IDevice device, Integer deviceHashCode) {
+        final DebugSessionInfo sessionInfo = new DebugSessionInfo("logcat");
+
+        final LogScannerFactory scannerFactory = new StackTraceMatcherFactory(myProject, sessionInfo);
+        AndroidLogcatPreferences logcatPreferences = AndroidLogcatPreferences.getInstance(myProject);
+        final AndroidLogcatService.LogLineListener receiver = new LogcatWriter(logcatPreferences, scannerFactory.createScanner());
+        listeners.put(deviceHashCode, receiver);
+        debugSessionInfos.put(deviceHashCode, sessionInfo);
+
+        ToolWindow t = ToolWindowManager.getInstance(myProject).getToolWindow(AndroidToolWindowFactory.TOOL_WINDOW_ID);
+        for (Content content : t.getContentManager().getContents()) {
+            final AndroidLogcatView view = content.getUserData(AndroidLogcatView.ANDROID_LOGCAT_VIEW_KEY);
+
+            if (view != null) {
+                ConsoleView c = view.getLogConsole().getConsole();
+                if (c instanceof ConsoleViewImpl) {
+                    // do we have to keep this reference?
+                    new ConsoleWatcher(myProject, (ConsoleViewImpl) c, sessionInfo);
+                }
+            }
+        }
+
+        AndroidLogcatService.getInstance().addListener(device, receiver, true);
+
+        TrackingService.trace(IdeaRawEvent.debugStart(myProject, sessionInfo));
+    }
+
+    private synchronized void removeReceiver(@NotNull IDevice device) {
+        removeReceiver(System.identityHashCode(device));
+    }
+
+    private void removeReceiver(Integer deviceHashCode) {
+        AndroidLogcatService.LogLineListener receiver = listeners.get(deviceHashCode);
+        if (receiver != null) {
+            DebugSessionInfo sessionInfo = debugSessionInfos.get(deviceHashCode);
+            debugSessionInfos.remove(deviceHashCode);
+            listeners.remove(deviceHashCode);
+            IdeaSamebugPlugin.getInstance().searchRequestStore.removeSession(sessionInfo);
+
+            TrackingService.trace(IdeaRawEvent.debugStop(myProject, debugSessionInfos.get(deviceHashCode)));
+        }
+    }
+
+    private final Map<Integer, AndroidLogcatService.LogLineListener> listeners = new HashMap<Integer, AndroidLogcatService.LogLineListener>();
+    private final Map<Integer, DebugSessionInfo> debugSessionInfos = new HashMap<Integer, DebugSessionInfo>();
+    private static final Logger LOGGER = Logger.getInstance(LogcatProcessWatcher.class);
+}
diff --git a/src/main/resources/META-INF/plugin.xml b/src/main/resources/META-INF/plugin.xml
index 50f7f92e..b4329994 100644
--- a/src/main/resources/META-INF/plugin.xml
+++ b/src/main/resources/META-INF/plugin.xml
@@ -1,5 +1,5 @@
 <idea-plugin version="2">
-    <id>Samebug</id>
+    <id>Samebug for Android Studio</id>
     <name>Samebug</name>
     <vendor email="hello@samebug.io" url="http://samebug.io">Samebug</vendor>
 
@@ -19,8 +19,9 @@
     ]]>
     </change-notes>
 
-    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
-    <idea-version since-build="141.0"/>
+    <idea-version since-build="145.0" until-build="162.0"/>
+    <!-- Without this explicit dependency, the plugin won't see the ddmlib and org.jetbrains.android classes -->
+    <depends>org.jetbrains.android</depends>
 
     <extensions defaultExtensionNs="com.intellij">
         <toolWindow id="Samebug" icon="/com/samebug/toolwindow/samebug.png" anchor="right"
